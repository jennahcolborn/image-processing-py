#!/usr/bin/env python
# coding: utf-8

# In[1]:


import skimage.io
import matplotlib
import matplotlib.pyplot as plt
import numpy as np
from skimage import *
from bokeh.plotting import figure, show, output_file
import PIL
from PIL import Image
from PIL import ImageFilter


# In[2]:


# Function to make the image black and white and plot it
def convert_to_BW(filepath, new_filename):
    """this fuction takes two arguments, a file path for a jpg image and a file name for the image that will be generated by this fuction.
    Both arguments should be given as strings.
    This function takes in a color image and changes the pixel RBG values to a single pixel value per image, producing a black and white version of the image."""
    image_file = Image.open(filepath) # open colour image
    image_file_BW = image_file.convert('1') # convert image to black and white
    image_file_BW.save(new_filename)
    bw = plt.imshow(image_file_BW)


# In[8]:


# Function to read the image in

def read(filepath):
    """ When given a file path of an image as a string, this function returns the array of pixel values for that image."""
# Array of the image intensity at each pixel 
    intensity_array = skimage.io.imread(filepath)
    return intensity_array


# In[7]:


# Function to compute background of the image
def background(intensity_array):
    """ When given a file path of an image as a string, this function returns the average background pixel value for that image. """
    median_intensity = np.median(intensity_array)
    stdev_intensity = np.std(intensity_array)
    # Defining the boundaries of acceptable variation in intensity.
    upper_bound = median_intensity + 2 * stdev_intensity
    background_list = []
    if type(a[0][0]) == list:
        for i in intensity_array:
            for j in i:
                for k in j:
                    if k <= upper_bound: 
                        background_list.append(k)
    elif type(a[0][0]) == int:
        for i in intensity_array:
            for j in i:
                if j <= upper_bound:
                    background_list.append(j)
    average_background = np.mean(background_list)
    print(a[0][0])
    print(type(a[0][0]))
    print("The average background intensity of this image is", average_background)


# In[6]:


# Function to take all the elements and put them into one list
def unify(filepath):
    """ When given a file path of an image as a string, this function returns a single list of all of the pixel values of that image. """
    all_pixels = []
    intensities = read(filepath)
    try:
        if a[0][0][0] is not None:
            for i in intensities:
                for j in i:
                    for k in j:
                        all_pixels.append(k)
    except IndexError:
        intensities.remove(intensities[-1])
        for i in intensities:
            for j in i:
                all_pixels.append(j)
    return all_pixels


# In[9]:


# Function to make a histogram of all pixel intensity values
def histogram(filepath):
    """ When given a file path of an image as a string, this function returns a histogram of the pixel values of the image"""
    all_intensities = unify(filepath)
    print(all_intensities)
    maximum = np.amax(all_intensities)
    bins = [0]
    bin_spacing = maximum / 10
    for i in range(1, 10):
        j = i * bin_spacing
        bins.append(j)
    plt.hist(all_intensities, bins)
    plt.show()


# In[ ]:


# Function to normalize the intensity array

